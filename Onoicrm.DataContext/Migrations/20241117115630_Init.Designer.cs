// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Onoicrm.DataContext;

#nullable disable

namespace Onoicrm.DataContext.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20241117115630_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Armchair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkTimeFrom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkTimeTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Armchairs", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.AttachedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("StorageId")
                        .HasColumnType("text");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AttachedFiles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ArmchairId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BookingGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Discount")
                        .HasColumnType("bigint");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<long?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<long>("Salary")
                        .HasColumnType("bigint");

                    b.Property<int>("SalaryType")
                        .HasColumnType("integer");

                    b.Property<long?>("ServiceGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("TreatmentPlanId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArmchairId");

                    b.HasIndex("BookingGroupId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingCancellationReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<long>("CancellationReasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CancellationReasonId");

                    b.HasIndex("ClinicId");

                    b.ToTable("BookingСancellationReason", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.ToTable("BookingGroup", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingTooth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long>("ToothId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ToothStateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ToothId");

                    b.HasIndex("ToothStateId");

                    b.ToTable("BookingTooth", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingToothChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookingToothId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MasterCon")
                        .HasColumnType("bigint");

                    b.Property<long>("MasterFile")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingToothId");

                    b.HasIndex("ChannelId");

                    b.ToTable("BookingToothChannel", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.CancellationReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("СancellationReason", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long>("ToothId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ToothId");

                    b.ToTable("Channel", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Clinic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BookingTimeDuration")
                        .HasColumnType("integer");

                    b.Property<int>("BookingType")
                        .HasColumnType("integer");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("GroupUserProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxChairCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaxDoctorCount")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("UseArmchairForBooking")
                        .HasColumnType("boolean");

                    b.Property<string>("WappiProfileId")
                        .HasColumnType("text");

                    b.Property<string>("WappiToken")
                        .HasColumnType("text");

                    b.Property<string>("WorkEndTime")
                        .HasColumnType("text");

                    b.Property<string>("WorkStartTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clinics", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.DoctorServiceGroupSalary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<int>("SalaryType")
                        .HasColumnType("integer");

                    b.Property<long>("ServiceGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceGroupId");

                    b.ToTable("DoctorServiceGroupSalary", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BgColor")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("TextColor")
                        .HasColumnType("text");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Groups", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ImplementedService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BookingToothId")
                        .HasColumnType("bigint");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long>("LabaratoryPrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<long>("Salary")
                        .HasColumnType("bigint");

                    b.Property<int>("SalaryType")
                        .HasColumnType("integer");

                    b.Property<long?>("ServiceGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingToothId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ImplementedService", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.InformationSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("InformationSource", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<long?>("InformationSourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobPosition")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("MailingConsent")
                        .HasColumnType("boolean");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("WhatsAppNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("InformationSourceId");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.PatientSymptom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("SymptomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Value")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SymptomId");

                    b.ToTable("PatientSymptom", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BookingGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingGroupId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Prices", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LabaratoryCaption")
                        .HasColumnType("text");

                    b.Property<decimal?>("LabaratoryPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceFrom")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceTo")
                        .HasColumnType("numeric");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ServiceGroupLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceGroupLink", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Symptom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Symptoms", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Tooth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("Quarter")
                        .HasColumnType("integer");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Teeth", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ToothState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ToothStates", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.TreatmentPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long>("ToothId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ToothId");

                    b.ToTable("TreatmentPlan", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb");

                    b.Property<int>("Debit")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<long?>("InformationSourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastView")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MailingConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<long>("Salary")
                        .HasColumnType("bigint");

                    b.Property<int>("SalaryType")
                        .HasColumnType("integer");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("InformationSourceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingFile", b =>
                {
                    b.HasBaseType("Onoicrm.Domain.Entities.AttachedFile");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingFiles", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingToothFile", b =>
                {
                    b.HasBaseType("Onoicrm.Domain.Entities.AttachedFile");

                    b.Property<long?>("BookingToothId")
                        .HasColumnType("bigint");

                    b.HasIndex("BookingToothId");

                    b.ToTable("BookingToothFile", (string)null);
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ServiceGroup", b =>
                {
                    b.HasBaseType("Onoicrm.Domain.Entities.Group");

                    b.Property<long?>("ClinicId")
                        .HasColumnType("bigint");

                    b.HasIndex("ClinicId");

                    b.ToTable("ServiceGroup", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Armchair", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Booking", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Armchair", "Armchair")
                        .WithMany()
                        .HasForeignKey("ArmchairId");

                    b.HasOne("Onoicrm.Domain.Entities.BookingGroup", "BookingGroup")
                        .WithMany()
                        .HasForeignKey("BookingGroupId");

                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.UserProfile", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Onoicrm.Domain.Entities.ServiceGroup", "ServiceGroup")
                        .WithMany()
                        .HasForeignKey("ServiceGroupId");

                    b.HasOne("Onoicrm.Domain.Entities.TreatmentPlan", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId");

                    b.Navigation("Armchair");

                    b.Navigation("BookingGroup");

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("ServiceGroup");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingCancellationReason", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.CancellationReason", "CancellationReason")
                        .WithMany()
                        .HasForeignKey("CancellationReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("CancellationReason");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingGroup", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("Onoicrm.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingTooth", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingTeeth")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.ToothState", "ToothState")
                        .WithMany()
                        .HasForeignKey("ToothStateId");

                    b.Navigation("Booking");

                    b.Navigation("Tooth");

                    b.Navigation("ToothState");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingToothChannel", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.BookingTooth", "BookingTooth")
                        .WithMany("Channels")
                        .HasForeignKey("BookingToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingTooth");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Channel", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Tooth", "Tooth")
                        .WithMany("Channels")
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tooth");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.DoctorServiceGroupSalary", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.UserProfile", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.ServiceGroup", "ServiceGroup")
                        .WithMany()
                        .HasForeignKey("ServiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("ServiceGroup");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Group", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Group", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ImplementedService", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Booking", "Booking")
                        .WithMany("ImplementedServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.BookingTooth", "BookingTooth")
                        .WithMany("ImplementedServices")
                        .HasForeignKey("BookingToothId");

                    b.HasOne("Onoicrm.Domain.Entities.UserProfile", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Onoicrm.Domain.Entities.ServiceGroup", "ServiceGroup")
                        .WithMany()
                        .HasForeignKey("ServiceGroupId");

                    b.HasOne("Onoicrm.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("BookingTooth");

                    b.Navigation("Doctor");

                    b.Navigation("Service");

                    b.Navigation("ServiceGroup");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Patient", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("Onoicrm.Domain.Entities.InformationSource", "InformationSource")
                        .WithMany()
                        .HasForeignKey("InformationSourceId");

                    b.Navigation("InformationSource");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.PatientSymptom", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("Onoicrm.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Onoicrm.Domain.Entities.Symptom", "Symptom")
                        .WithMany()
                        .HasForeignKey("SymptomId");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.BookingGroup", "BookingGroup")
                        .WithMany()
                        .HasForeignKey("BookingGroupId");

                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("Onoicrm.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Onoicrm.Domain.Entities.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("BookingGroup");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Price", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Service", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ServiceGroupLink", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.ServiceGroup", null)
                        .WithMany("Links")
                        .HasForeignKey("ServiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.Service", null)
                        .WithMany("Links")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Symptom", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ToothState", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.TreatmentPlan", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.UserProfile", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.UserProfile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Tooth");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("Onoicrm.Domain.Entities.InformationSource", "InformationSource")
                        .WithMany()
                        .HasForeignKey("InformationSourceId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("InformationSource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingFile", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Booking", "Booking")
                        .WithMany("Files")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onoicrm.Domain.Entities.AttachedFile", null)
                        .WithOne()
                        .HasForeignKey("Onoicrm.Domain.Entities.BookingFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingToothFile", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.BookingTooth", "BookingTooth")
                        .WithMany("Files")
                        .HasForeignKey("BookingToothId");

                    b.HasOne("Onoicrm.Domain.Entities.AttachedFile", null)
                        .WithOne()
                        .HasForeignKey("Onoicrm.Domain.Entities.BookingToothFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingTooth");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ServiceGroup", b =>
                {
                    b.HasOne("Onoicrm.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("Onoicrm.Domain.Entities.Group", null)
                        .WithOne()
                        .HasForeignKey("Onoicrm.Domain.Entities.ServiceGroup", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingTeeth");

                    b.Navigation("Files");

                    b.Navigation("ImplementedServices");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.BookingTooth", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Files");

                    b.Navigation("ImplementedServices");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Group", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Service", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.Tooth", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("Onoicrm.Domain.Entities.ServiceGroup", b =>
                {
                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
